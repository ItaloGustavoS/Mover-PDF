// Custom Array methods
const arrayProto = Array.prototype;
const arrayCustomMethods = {
  isArray: function() {
    return Array.isArray(this);
  },
  myCustomMethod: function() {
    // code for the new method goes here
  }
  // ... continue for all other Array methods
};
Object.assign(arrayProto, arrayCustomMethods);

// Custom Object methods
const objectProto = Object.prototype;
const objectCustomMethods = {
  myCustomMethod: function() {
    // code for the new method goes here
  }
  // ... continue for all other Object methods
};
Object.assign(objectProto, objectCustomMethods);

// Custom Function methods
const functionProto = Function.prototype;
const functionCustomMethods = {
  myCustomMethod: function() {
    // code for the new method goes here
  }
  // ... continue for all other Function methods
};
Object.assign(functionProto, functionCustomMethods);

// Custom String methods
const stringProto = String.prototype;
const stringCustomMethods = {
  myCustomMethod: function() {
    // code for the new method goes here
  }
  // ... continue for all other String methods
};
Object.assign(stringProto, stringCustomMethods);

// Avoid overwriting existing methods
Array.prototype.toString = (() => {
  const originalToString = arrayProto.toString;
  return function() {
    // custom implementation of the toString method
    // call the original method if needed
    return originalToString.call(this);
  }
})();

// ... continue for all other methods that need to be customized
